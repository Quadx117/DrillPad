package drillpad.gui;

import java.awt.image.BufferedImage;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

import drillpad.domain.SceneController;
import drillpad.general.utility.ImageUtilities;

/**
 *
 * @author Eric Perron
 */
public class SportPropertyWindow extends javax.swing.JDialog
{
    private final SceneController controller = SceneController.getInstance();
    private final boolean isNewSport;
    private BufferedImage newPlayingFieldImage;

    /**
     * Creates new {@code SportPropertyWindow} window.
     *
     * @param isNewSport
     */
    SportPropertyWindow(boolean isNewSport)
    {
        this.isNewSport = isNewSport;

        initComponents();
        init();
    }

    private void init()
    {
        if (!isNewSport)
        {
            sportNameTextField.setText(controller.getCurrentSportName());
            numberOfTeamsTextField.setText(
                    Integer.toString(controller.getMaxNumberOfTeams()));
            numberOfPlayersTextField.setText(
                    Integer.toString(controller.getMaxNumberOfPlayers()));
            newPlayingFieldImage = controller.getCurrentSportPlayingFiledImage();
            imagePreviewLabel.setIcon(
                    ImageUtilities.getScaledImage(
                            newPlayingFieldImage,
                            imagePreviewLabel.getPreferredSize().width,
                            imagePreviewLabel.getPreferredSize().height,
                            true));
            imagePreviewLabel.setText("");
            imagePreviewLabel.repaint();
            widthTextField.setText(Float.toString(controller.getCurrentSportPlayingFieldWidth()));
            heightTextField.setText(Float.toString(controller.getCurrentSportPlayingFieldHeight()));
        }

        setPreferredSize(null);
        setSize(getPreferredSize());
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        sportNameLabel = new javax.swing.JLabel();
        sportNameTextField = new javax.swing.JTextField();
        numberOfTeamsLabel = new javax.swing.JLabel();
        numberOfTeamsTextField = new javax.swing.JTextField();
        numberOfPlayersLabel = new javax.swing.JLabel();
        numberOfPlayersTextField = new javax.swing.JTextField();
        playingFieldLabel = new javax.swing.JLabel();
        imageLabel = new javax.swing.JLabel();
        imagePreviewLabel = new javax.swing.JLabel();
        previewBrowseButton = new javax.swing.JButton();
        widthLabel = new javax.swing.JLabel();
        widthTextField = new javax.swing.JTextField();
        heightLabel = new javax.swing.JLabel();
        heightTextField = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(isNewSport ? "Création d'un sport" : "Édition d'un sport");
        setAlwaysOnTop(true);
        setModal(true);
        setName("strategyPropertyWindow"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        sportNameLabel.setText("Nom du sport");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        getContentPane().add(sportNameLabel, gridBagConstraints);

        sportNameTextField.setText((isNewSport) ? "":controller.getCurrentSportName());
        sportNameTextField.setMinimumSize(new java.awt.Dimension(150, 20));
        sportNameTextField.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 10);
        getContentPane().add(sportNameTextField, gridBagConstraints);

        numberOfTeamsLabel.setText("Nombre d'équipes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        getContentPane().add(numberOfTeamsLabel, gridBagConstraints);

        numberOfTeamsTextField.setText((isNewSport) ? "":String.valueOf(controller.getMaxNumberOfTeams()));
        numberOfTeamsTextField.setMinimumSize(new java.awt.Dimension(30, 20));
        numberOfTeamsTextField.setPreferredSize(new java.awt.Dimension(30, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        getContentPane().add(numberOfTeamsTextField, gridBagConstraints);

        numberOfPlayersLabel.setText("Nombre de joueurs par équipe");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        getContentPane().add(numberOfPlayersLabel, gridBagConstraints);

        numberOfPlayersTextField.setText((isNewSport) ? "":String.valueOf(controller.getMaxNumberOfPlayers()));
        numberOfPlayersTextField.setMinimumSize(new java.awt.Dimension(30, 20));
        numberOfPlayersTextField.setPreferredSize(new java.awt.Dimension(30, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        getContentPane().add(numberOfPlayersTextField, gridBagConstraints);

        playingFieldLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        playingFieldLabel.setText("Terrain");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        getContentPane().add(playingFieldLabel, gridBagConstraints);

        imageLabel.setText("Image");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        getContentPane().add(imageLabel, gridBagConstraints);

        imagePreviewLabel.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        imagePreviewLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imagePreviewLabel.setText("[Pas d'image sélectionnée]");
        imagePreviewLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        imagePreviewLabel.setMaximumSize(new java.awt.Dimension(200, 100));
        imagePreviewLabel.setMinimumSize(new java.awt.Dimension(200, 100));
        imagePreviewLabel.setPreferredSize(new java.awt.Dimension(200, 100));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        getContentPane().add(imagePreviewLabel, gridBagConstraints);

        previewBrowseButton.setText("Parcourir...");
        previewBrowseButton.setMaximumSize(new java.awt.Dimension(90, 24));
        previewBrowseButton.setMinimumSize(new java.awt.Dimension(90, 24));
        previewBrowseButton.setPreferredSize(new java.awt.Dimension(90, 24));
        previewBrowseButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                previewBrowseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        getContentPane().add(previewBrowseButton, gridBagConstraints);

        widthLabel.setText("Longueur (m)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        getContentPane().add(widthLabel, gridBagConstraints);

        widthTextField.setMinimumSize(new java.awt.Dimension(150, 20));
        widthTextField.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        getContentPane().add(widthTextField, gridBagConstraints);

        heightLabel.setText("Largeur (m)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        getContentPane().add(heightLabel, gridBagConstraints);

        heightTextField.setMinimumSize(new java.awt.Dimension(150, 20));
        heightTextField.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        getContentPane().add(heightTextField, gridBagConstraints);

        okButton.setText("OK");
        okButton.setMaximumSize(new java.awt.Dimension(90, 24));
        okButton.setMinimumSize(new java.awt.Dimension(90, 24));
        okButton.setPreferredSize(new java.awt.Dimension(90, 24));
        okButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                okButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 5);
        getContentPane().add(okButton, gridBagConstraints);

        cancelButton.setText("Annuler");
        cancelButton.setMaximumSize(new java.awt.Dimension(90, 24));
        cancelButton.setMinimumSize(new java.awt.Dimension(90, 24));
        cancelButton.setPreferredSize(new java.awt.Dimension(90, 24));
        cancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 10);
        getContentPane().add(cancelButton, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okButtonActionPerformed
    {//GEN-HEADEREND:event_okButtonActionPerformed
        String newSportName = sportNameTextField.getText();
        if (newSportName == null || newSportName.isEmpty())
        {
            JOptionPane.showMessageDialog(this,
                                          "Le champs \"" + sportNameLabel.getText() + "\" est obligatoire.\n" +
                                          "Veuillez saisir un nom avant de continuer.",
                                          getTitle(),
                                          JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        int newMaxNumberOfTeams = readIntFromTextField(numberOfTeamsTextField,
                                                       numberOfTeamsLabel.getText());
        if (newMaxNumberOfTeams <= 0)
        {
            JOptionPane.showMessageDialog(this,
                                          "La valeurs du champs \"" +
                                          numberOfTeamsLabel.getText() +
                                          "\" doit être supéreur à 0.",
                                          getTitle(),
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }

        // TODO(Eric): Turn those into formattedTextFileds (see EntityTypePropertyWindow)
        int newMaxNumberOfPlayers = readIntFromTextField(numberOfPlayersTextField,
                                                         numberOfPlayersLabel.getText());
        if (newMaxNumberOfPlayers <= 0)
        {
            JOptionPane.showMessageDialog(this,
                                          "La valeurs du champs \"" +
                                          numberOfPlayersLabel.getText() +
                                          "\" doit être supéreur à 0.",
                                          getTitle(),
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (newPlayingFieldImage == null)
        {
            JOptionPane.showMessageDialog(this,
                                          "L'image du terrain est obligatoire.\n" +
                                          "Veuillez choisir une image avant de continuer.",
                                          getTitle(),
                                          JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // TODO(Eric): Turn those into formattedTextFileds (see EntityTypePropertyWindow)
        float newPlayingFieldWidth = readFloatFromTextField(widthTextField,
                                                            widthLabel.getText());
        if (newPlayingFieldWidth <= 0)
        {
            JOptionPane.showMessageDialog(this,
                                          "La valeurs du champs \"" +
                                          widthLabel.getText() +
                                          "\" doit être supéreur à 0.",
                                          getTitle(),
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }

        // TODO(Eric): Turn those into formattedTextFileds (see EntityTypePropertyWindow)
        float newPlayingFieldHeight = readFloatFromTextField(heightTextField,
                                                             heightLabel.getText());
        if (newPlayingFieldHeight <= 0)
        {
            JOptionPane.showMessageDialog(this,
                                          "La valeurs du champs \"" +
                                          heightLabel.getText() +
                                          "\" doit être supéreur à 0.",
                                          getTitle(),
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (isNewSport)
        {
            boolean sportWasAdded = controller.addSport(newSportName,
                                                        newMaxNumberOfTeams,
                                                        newMaxNumberOfPlayers,
                                                        newPlayingFieldImage,
                                                        newPlayingFieldWidth,
                                                        newPlayingFieldHeight);
            if (sportWasAdded)
            {
                dispose();
            }
            else
            {
                JOptionPane.showMessageDialog(this,
                                              "Ce sport existe déjà.\n" +
                                              "Veuillez choisir un nom différent",
                                              getTitle(),
                                              JOptionPane.ERROR_MESSAGE);
            }
        }
        else if (propertiesChanged())
        {
            int option = JOptionPane.showConfirmDialog(this,
                                                       "Voullez-vous vraiment modifier les informations ?",
                                                       getTitle(),
                                                       JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.OK_OPTION)
            {
                controller.editCurrentSport(newSportName,
                                            newMaxNumberOfTeams,
                                            newMaxNumberOfPlayers,
                                            newPlayingFieldImage,
                                            newPlayingFieldWidth,
                                            newPlayingFieldHeight);
                dispose();
            }
        }
        else
        {
            dispose();
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
    {//GEN-HEADEREND:event_cancelButtonActionPerformed
        close();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void previewBrowseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_previewBrowseButtonActionPerformed
    {//GEN-HEADEREND:event_previewBrowseButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Images (*.jpg, *.png)", "jpg", "jpeg", "png");
        fileChooser.setFileFilter(filter);

        int option = fileChooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION)
        {
            String path = fileChooser.getSelectedFile().toString();
            newPlayingFieldImage = controller.loadImageFromDisk(path);

            ImageIcon previewIcon;
            // NOTE: Only resize the image if one of the image dimension (width
            // or height) is greater than the imagePreviewLabel dimension.
            if (newPlayingFieldImage.getWidth() > imagePreviewLabel.getWidth() ||
                newPlayingFieldImage.getHeight() > imagePreviewLabel.getHeight())
            {
                previewIcon = ImageUtilities.getScaledImage(newPlayingFieldImage,
                                                            imagePreviewLabel.getWidth(),
                                                            imagePreviewLabel.getHeight(),
                                                            true);
            }
            else
            {
                previewIcon = new ImageIcon(newPlayingFieldImage);
            }

            imagePreviewLabel.setIcon(previewIcon);
            imagePreviewLabel.setText("");
            imagePreviewLabel.repaint();
        }
    }//GEN-LAST:event_previewBrowseButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        close();
    }//GEN-LAST:event_formWindowClosing

    /**
     * This methods reads a {@code float} value from a {@link jTextField}.
     * <p>
     * If the value is not valid ({@link Float#parseFloat(java.lang.String)} has
     * thrown a {@link NumberFormatException}), a popup is shown to the user.
     *
     * @param textField        The {@code jTextField} from which to parse the
     *                         value.
     * @param fieldDescription The description of the field used in the popup to
     *                         help the user identify which value is invalid.
     * @return the {@code float} value from the {@code jTextField} or -1 if the
     *         value was invalid.
     */
    private float readFloatFromTextField(JTextField textField, String fieldDescription)
    {
        float result = -1;

        try
        {
            result = Float.parseFloat(textField.getText());
        }
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(this,
                                          "La valeur du champs \"" +
                                          fieldDescription +
                                          "\" n'est pas un nombre décimale valide.",
                                          getTitle(),
                                          JOptionPane.ERROR_MESSAGE);
        }

        return result;
    }

    /**
     * This methods reads an {@code int} value from a {@link jTextField}.
     * <p>
     * If the value is not valid ({@link Integer#parseInt(java.lang.String)} has
     * thrown a {@link NumberFormatException}), a popup is shown to the user.
     *
     * @param textField        The {@code jTextField} from which to parse the
     *                         value.
     * @param fieldDescription The description of the field used in the popup to
     *                         help the user identify which value is invalid.
     * @return the {@code int} value from the {@code jTextField} or -1 if the
     *         value was invalid.
     */
    private int readIntFromTextField(JTextField textField, String fieldDescription)
    {
        int result = -1;

        try
        {
            result = Integer.parseInt(textField.getText());
        }
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(this,
                                          "La valeur du champs \"" +
                                          fieldDescription +
                                          "\" n'est pas un nombre entier valide.",
                                          getTitle(),
                                          JOptionPane.ERROR_MESSAGE);
        }

        return result;
    }

    private boolean propertiesChanged()
    {
        String currentName = controller.getCurrentSportName();
        int currentMaxNumberOfTeams = controller.getMaxNumberOfTeams();
        int currentMaxNumberOfPlayers = controller.getMaxNumberOfPlayers();
        BufferedImage currentImage = controller.getCurrentSportPlayingFiledImage();
        float currentWidth = controller.getCurrentSportPlayingFieldWidth();
        float currentHeight = controller.getCurrentSportPlayingFieldHeight();

        String newName = sportNameTextField.getText();
        int newMaxNumberOfTeams = readIntFromTextField(numberOfTeamsTextField,
                                                       numberOfTeamsLabel.getText());
        int newMaxNumberOfPlayers = readIntFromTextField(numberOfPlayersTextField,
                                                         numberOfPlayersLabel.getText());
        float newPlayingFieldWidth = readFloatFromTextField(widthTextField,
                                                            widthLabel.getText());
        float newPlayingFieldHeight = readFloatFromTextField(heightTextField,
                                                             heightLabel.getText());
        boolean nameChanged = !currentName.equals(newName);
        boolean numberOfTeamsChanged = (currentMaxNumberOfTeams != newMaxNumberOfTeams);
        boolean numberOfPlayersChanged = (currentMaxNumberOfPlayers != newMaxNumberOfPlayers);
        boolean imageChanged = !ImageUtilities.imagesAreEqual(currentImage, newPlayingFieldImage);
        boolean widthChanged = (currentWidth != newPlayingFieldWidth);
        boolean heightChanged = (currentHeight != newPlayingFieldHeight);

        return (nameChanged || numberOfTeamsChanged || numberOfPlayersChanged ||
                imageChanged || widthChanged || heightChanged);
    }

    private void close()
    {
        if (isNewSport)
        {
            if (controller.getSportsCount() == 0)
            {
                okButton.doClick();
            }
            else
            {
                dispose();
            }
        }
        else if (propertiesChanged())
        {
            int option = JOptionPane.showConfirmDialog(this,
                                                       "Il y a des modifications non enregistrées\n" +
                                                       "Voullez-vous vraiment annuler ses modifications ?",
                                                       getTitle(),
                                                       JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.OK_OPTION)
            {
                dispose();
            }
        }
        else
        {
            dispose();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel heightLabel;
    private javax.swing.JTextField heightTextField;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel imagePreviewLabel;
    private javax.swing.JLabel numberOfPlayersLabel;
    private javax.swing.JTextField numberOfPlayersTextField;
    private javax.swing.JLabel numberOfTeamsLabel;
    private javax.swing.JTextField numberOfTeamsTextField;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel playingFieldLabel;
    private javax.swing.JButton previewBrowseButton;
    private javax.swing.JLabel sportNameLabel;
    private javax.swing.JTextField sportNameTextField;
    private javax.swing.JLabel widthLabel;
    private javax.swing.JTextField widthTextField;
    // End of variables declaration//GEN-END:variables
}
