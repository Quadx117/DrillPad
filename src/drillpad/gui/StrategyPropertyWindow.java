package drillpad.gui;

import java.awt.image.BufferedImage;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

import drillpad.domain.SceneController;
import drillpad.general.utility.ImageUtilities;
import drillpad.gui.extensions.StrategyComboBox;

/**
 *
 * @author Eric Perron
 */
public class StrategyPropertyWindow extends javax.swing.JDialog
{
    private final SceneController controller = SceneController.getInstance();
    private final StrategyComboBox strategyComboBox;
    private final boolean isNewStrategy;
    private BufferedImage newPlayingFieldImage;

    /**
     * Creates new {@code StrategyPropertyWindow} window.
     *
     * @param strategyComboBox
     * @param isNewStrategy
     */
    StrategyPropertyWindow(StrategyComboBox strategyComboBox,
                           boolean isNewStrategy)
    {
        this.strategyComboBox = strategyComboBox;
        this.isNewStrategy = isNewStrategy;

        initComponents();
        init();
    }

    private void init()
    {
        if (isNewStrategy)
        {
            nameTextField.setText("Nouvelle Stratégie " + controller.getCurrentSportName());
            restrictMaxPlayerCheckBox.setSelected(true);
            newPlayingFieldImage = controller.getCurrentSportPlayingFiledImage();
            widthTextField.setText(Float.toString(controller.getCurrentSportPlayingFieldWidth()));
            heightTextField.setText(Float.toString(controller.getCurrentSportPlayingFieldHeight()));
        }
        else
        {
            nameTextField.setText(controller.getCurrentStrategyName());
            restrictMaxPlayerCheckBox.setSelected(controller.isCurrentStrategyMaxNumberOfPlayersRestricted());
            newPlayingFieldImage = controller.getCurrentStrategyPlayingFieldImage();
            widthTextField.setText(Float.toString(controller.getCurrentStrategyPlayingFieldWidth()));
            heightTextField.setText(Float.toString(controller.getCurrentStrategyPlayingFieldHeight()));
        }

        imagePreviewLabel.setText("");
        imagePreviewLabel.setIcon(
                ImageUtilities.getScaledImage(
                        newPlayingFieldImage,
                        imagePreviewLabel.getPreferredSize().width,
                        imagePreviewLabel.getPreferredSize().height,
                        true));

        setPreferredSize(null);
        setSize(getPreferredSize());
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        nameTextField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        strategyLabel = new javax.swing.JLabel();
        playingFieldLabel = new javax.swing.JLabel();
        imageLabel = new javax.swing.JLabel();
        heightLabel = new javax.swing.JLabel();
        widthTextField = new javax.swing.JTextField();
        widthLabel = new javax.swing.JLabel();
        heightTextField = new javax.swing.JTextField();
        imagePreviewLabel = new javax.swing.JLabel();
        previewBrowseButton = new javax.swing.JButton();
        restrictMaxPlayerCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(isNewStrategy ? "Création d'une stratégie" : "Édition de la stratégie");
        setAlwaysOnTop(true);
        setModal(true);
        setName("strategyPropertyWindow"); // NOI18N
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        okButton.setText("OK");
        okButton.setMaximumSize(new java.awt.Dimension(90, 24));
        okButton.setMinimumSize(new java.awt.Dimension(90, 24));
        okButton.setPreferredSize(new java.awt.Dimension(90, 24));
        okButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                okButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 5);
        getContentPane().add(okButton, gridBagConstraints);

        cancelButton.setText("Annuler");
        cancelButton.setMaximumSize(new java.awt.Dimension(90, 24));
        cancelButton.setMinimumSize(new java.awt.Dimension(90, 24));
        cancelButton.setPreferredSize(new java.awt.Dimension(90, 24));
        cancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 10);
        getContentPane().add(cancelButton, gridBagConstraints);

        nameTextField.setMinimumSize(new java.awt.Dimension(150, 20));
        nameTextField.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        getContentPane().add(nameTextField, gridBagConstraints);

        nameLabel.setText("Nom");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        getContentPane().add(nameLabel, gridBagConstraints);

        strategyLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        strategyLabel.setText("Stratégie");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        getContentPane().add(strategyLabel, gridBagConstraints);

        playingFieldLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        playingFieldLabel.setText("Terrain");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        getContentPane().add(playingFieldLabel, gridBagConstraints);

        imageLabel.setText("Image");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        getContentPane().add(imageLabel, gridBagConstraints);

        heightLabel.setText("Largeur (m)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
        getContentPane().add(heightLabel, gridBagConstraints);

        widthTextField.setMinimumSize(new java.awt.Dimension(150, 20));
        widthTextField.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 10);
        getContentPane().add(widthTextField, gridBagConstraints);

        widthLabel.setText("Longueur (m)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 5, 5);
        getContentPane().add(widthLabel, gridBagConstraints);

        heightTextField.setMinimumSize(new java.awt.Dimension(150, 20));
        heightTextField.setPreferredSize(new java.awt.Dimension(150, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        getContentPane().add(heightTextField, gridBagConstraints);

        imagePreviewLabel.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        imagePreviewLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imagePreviewLabel.setText("[Pas d'image sélectionnée]");
        imagePreviewLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        imagePreviewLabel.setMaximumSize(new java.awt.Dimension(200, 100));
        imagePreviewLabel.setMinimumSize(new java.awt.Dimension(200, 100));
        imagePreviewLabel.setPreferredSize(new java.awt.Dimension(200, 100));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        getContentPane().add(imagePreviewLabel, gridBagConstraints);

        previewBrowseButton.setText("Parcourir...");
        previewBrowseButton.setMaximumSize(new java.awt.Dimension(90, 24));
        previewBrowseButton.setMinimumSize(new java.awt.Dimension(90, 24));
        previewBrowseButton.setPreferredSize(new java.awt.Dimension(90, 24));
        previewBrowseButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                previewBrowseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 10);
        getContentPane().add(previewBrowseButton, gridBagConstraints);

        restrictMaxPlayerCheckBox.setText("Valider maximum de joueurs par équipe");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        getContentPane().add(restrictMaxPlayerCheckBox, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okButtonActionPerformed
    {//GEN-HEADEREND:event_okButtonActionPerformed
        String newName = nameTextField.getText();
        boolean newRestrictMaxPlayer = restrictMaxPlayerCheckBox.isSelected();

        // TODO(Eric): Turn those into formattedTextFileds (see EntityTypePropertyWindow)
        float newPlayingFieldWidth = readFloatFromTextField(widthTextField,
                                                            widthLabel.getText());
        float newPlayingFieldHeight = readFloatFromTextField(heightTextField,
                                                             heightLabel.getText());

        if (newName == null || newName.isEmpty())
        {
            JOptionPane.showMessageDialog(this,
                                          "Le nom de la stratégie est obligatoire.\n" +
                                          "Veuillez saisir un nom avant de continuer.",
                                          getTitle(), JOptionPane.INFORMATION_MESSAGE);
        }
        else if (newPlayingFieldImage == null)
        {
            JOptionPane.showMessageDialog(this,
                                          "L'image du terrain est obligatoire.\n" +
                                          "Veuillez choisir une image avant de continuer.",
                                          getTitle(), JOptionPane.INFORMATION_MESSAGE);
        }
        if (newPlayingFieldWidth > 0f &&
            newPlayingFieldHeight > 0f)
        {
            if (isNewStrategy)
            {
                if (strategyComboBox.itemExist(newName))
                {
                    JOptionPane.showMessageDialog(this,
                                                  "Cette stratégie existe déjà." +
                                                  "Veuillez choisir un nom différent",
                                                  getTitle(),
                                                  JOptionPane.ERROR_MESSAGE);
                }
                else
                {
                    controller.addStrategy(newName,
                                           newRestrictMaxPlayer,
                                           newPlayingFieldImage,
                                           newPlayingFieldWidth,
                                           newPlayingFieldHeight);
                    strategyComboBox.addItem(newName, newPlayingFieldImage);
                    strategyComboBox.setSelectedItem(newName);
                    dispose();
                }
            }
            else if (propertiesChanged())
            {
                int option = JOptionPane.showConfirmDialog(this,
                                                           "Voullez-vous vraiment modifier les informations ?",
                                                           getTitle(),
                                                           JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.OK_OPTION)
                {
                    controller.editCurrentStrategy(newName,
                                                   newRestrictMaxPlayer,
                                                   newPlayingFieldImage,
                                                   newPlayingFieldWidth,
                                                   newPlayingFieldHeight);
                    strategyComboBox.editItem(controller.getCurrentStrategyName(),
                                              newName,
                                              newPlayingFieldImage);
                    strategyComboBox.setSelectedItem(newName);
                    dispose();
                }
            }
            else
            {
                dispose();
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Les valeurs des champs \"" +
                                                widthLabel.getText() + "\" et \"" +
                                                heightLabel.getText() +
                                                "\" doivent être supéreur à 0.",
                                          getTitle(), JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
    {//GEN-HEADEREND:event_cancelButtonActionPerformed
        close();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void previewBrowseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_previewBrowseButtonActionPerformed
    {//GEN-HEADEREND:event_previewBrowseButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Images (*.jpg, *.png)", "jpg", "jpeg", "png");
        fileChooser.setFileFilter(filter);

        int option = fileChooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION)
        {
            String path = fileChooser.getSelectedFile().toString();
            newPlayingFieldImage = controller.loadImageFromDisk(path);

            ImageIcon previewIcon;
            // NOTE: Only resize the image if one of the image dimension (width
            // or height) is greater than the imagePreviewLabel dimension.
            if (newPlayingFieldImage.getWidth() > imagePreviewLabel.getWidth() ||
                newPlayingFieldImage.getHeight() > imagePreviewLabel.getHeight())
            {
                previewIcon = ImageUtilities.getScaledImage(newPlayingFieldImage,
                                                            imagePreviewLabel.getWidth(),
                                                            imagePreviewLabel.getHeight(),
                                                            true);
            }
            else
            {
                previewIcon = new ImageIcon(newPlayingFieldImage);
            }

            imagePreviewLabel.setIcon(previewIcon);
            imagePreviewLabel.setText("");
            imagePreviewLabel.repaint();
        }
    }//GEN-LAST:event_previewBrowseButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        close();
    }//GEN-LAST:event_formWindowClosing

    /**
     * This methods reads a {@code float} value from a {@link jTextField}.
     * <p>
     * If the value is not valid ({@link Float#parseFloat(java.lang.String)} has
     * thrown a {@link NumberFormatException}), a popup is shown to the user.
     *
     * @param textField        The {@code jTextField} from which to parse the
     *                         value.
     * @param fieldDescription The description of the field used in the popup to
     *                         help the user identify which value is invalid.
     * @return the {@code float} value from the {@code jTextField} or -1 if the
     *         value was invalid.
     */
    private float readFloatFromTextField(JTextField textField, String fieldDescription)
    {
        float result = -1;

        try
        {
            result = Float.parseFloat(textField.getText());
        }
        catch (NumberFormatException e)
        {
            JOptionPane.showMessageDialog(this, "La valeur du champs \"" +
                                                fieldDescription +
                                                "\" n'est pas un nombre décimale valide.",
                                          getTitle(), JOptionPane.ERROR_MESSAGE);
        }

        return result;
    }

    private boolean propertiesChanged()
    {
        String currentName = strategyComboBox.getSelectedStrategyName();
        boolean currentRestrictMaxPlayer = controller.isCurrentStrategyMaxNumberOfPlayersRestricted();
        BufferedImage currentPlayingFieldImage = controller.getCurrentStrategyPlayingFieldImage();
        float currentPlayingFieldWidth = controller.getCurrentStrategyPlayingFieldWidth();
        float currentPlayingFieldHeight = controller.getCurrentStrategyPlayingFieldHeight();

        String newName = nameTextField.getText();
        boolean newRestrictMaxPlayer = restrictMaxPlayerCheckBox.isSelected();
        float newPlayingFieldWidth = readFloatFromTextField(widthTextField,
                                                            widthLabel.getText());
        float newPlayingFieldHeight = readFloatFromTextField(heightTextField,
                                                             heightLabel.getText());

        boolean nameChanged = !currentName.equals(newName);
        boolean restrictMaxPlayerChanged = (currentRestrictMaxPlayer != newRestrictMaxPlayer);
        boolean imageChanged = !ImageUtilities.imagesAreEqual(currentPlayingFieldImage,
                                                              newPlayingFieldImage);
        boolean widthChanged = (currentPlayingFieldWidth != newPlayingFieldWidth);
        boolean heightChanged = (currentPlayingFieldHeight != newPlayingFieldHeight);

        return (nameChanged || restrictMaxPlayerChanged ||
                imageChanged || widthChanged || heightChanged);
    }

    private void close()
    {
        if (isNewStrategy)
        {
            if (controller.getCurrentSportStrategyCount() == 0)
            {
                okButton.doClick();
            }
            else
            {
                dispose();
            }
        }
        else if (propertiesChanged())
        {
            int option = JOptionPane.showConfirmDialog(this,
                                                       "Il y a des modifications non enregistrées\n" +
                                                       "Voullez-vous vraiment annuler ses modifications ?",
                                                       getTitle(),
                                                       JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.OK_OPTION)
            {
                dispose();
            }
        }
        else
        {
            dispose();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel heightLabel;
    private javax.swing.JTextField heightTextField;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel imagePreviewLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel playingFieldLabel;
    private javax.swing.JButton previewBrowseButton;
    private javax.swing.JCheckBox restrictMaxPlayerCheckBox;
    private javax.swing.JLabel strategyLabel;
    private javax.swing.JLabel widthLabel;
    private javax.swing.JTextField widthTextField;
    // End of variables declaration//GEN-END:variables
}
