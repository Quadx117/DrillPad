package drillpad.gui;

import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.image.BufferedImage;
import java.text.NumberFormat;

import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.basic.BasicComboBoxRenderer;

import drillpad.domain.SceneController;
import drillpad.general.utility.ImageUtilities;
import drillpad.gui.extensions.SortedComboBox;

/**
 *
 * @author Eric Perron
 */
public class EntityTypePropertyWindow extends javax.swing.JDialog
{
    private final SceneController controller = SceneController.getInstance();
    private final SortedComboBox mainWindowEntityTypeComboBox;
    private final boolean isNewEntityType;
    private BufferedImage newImage;
    private int currentNumberOfTeams;
    private final NumberFormat percentFormat;
    private final NumberFormat integerFormat;
    private final String nullImageText = "<html>\n    [Pas d'image<br>sélectionnée]\n</html>";

    /**
     * Creates a new {@link JDialog} used to add or edit an {@link EntityType}.
     *
     * @param isNewEntityType              Whether or not this {@code JDialog}
     *                                     is used to add a new
     *                                     {@code EntityType}.
     * @param mainWindowEntityTypeComboBox The {@link SortedComboBox} used to
     *                                     display the available
     *                                     {@code EntityType}'s in the
     *                                     {@link MainWindow}.
     */
    EntityTypePropertyWindow(boolean isNewEntityType,
                             SortedComboBox mainWindowEntityTypeComboBox)
    {
        this.isNewEntityType = isNewEntityType;
        this.mainWindowEntityTypeComboBox = mainWindowEntityTypeComboBox;

        percentFormat = NumberFormat.getNumberInstance();
        percentFormat.setMaximumIntegerDigits(4);
        percentFormat.setMaximumFractionDigits(1);

        integerFormat = NumberFormat.getIntegerInstance();
        integerFormat.setMaximumIntegerDigits(4);

        initComponents();
        init();
    }

    private void init()
    {
        entityTypeComboBox.setVisible(!isNewEntityType);
        deleteButton.setVisible(!isNewEntityType);
        currentNumberOfTeams = 0;

        for (String entityType : controller.getEntityTypeNames())
        {
            if (!isNewEntityType)
            {
                entityTypeComboBox.addItem(entityType);
            }

            if (controller.isEntityTypeTeam(entityType))
            {
                ++currentNumberOfTeams;
            }
        }

        if (!isNewEntityType)
        {
            entityTypeComboBox.setSelectedIndex(0);
        }

        nameTextField.requestFocusInWindow();

        setPreferredSize(null);
        setSize(getPreferredSize());
    }

    private void loadEntityType(String name)
    {
        nameTextField.setText(name);
        colorPreviewLabel.setBackground(controller.getEntityTypeColor(name));
        diameterFormattedTextField.setValue(controller.getEntityTypeRadius(name) * 2);
        imagePreviewLabel.setIcon(null);
        imagePreviewLabel.setText(nullImageText);

        newImage = controller.getEntityTypeImage(name);
        if (newImage != null)
        {
            imagePreviewLabel.setIcon(
                    ImageUtilities.getScaledImage(newImage,
                                                  imagePreviewLabel.getWidth(),
                                                  imagePreviewLabel.getHeight(),
                                                  true));
            imagePreviewLabel.setText("");
        }

        imageScaleFormattedTextField.setValue(controller.getEntityTypeImageScale(name) * 100);
        isTeamCheckBox.setSelected(controller.isEntityTypeTeam(name));
    }

    private boolean entityTypeExist(JComboBox comboBox, String name)
    {
        DefaultComboBoxModel<String> model = (DefaultComboBoxModel) comboBox.getModel();

        return (model.getIndexOf(name) != -1);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        entityTypeComboBox = new javax.swing.JComboBox<>();
        deleteButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        isTeamCheckBox = new javax.swing.JCheckBox();
        colorLabel = new javax.swing.JLabel();
        diameterLabel = new javax.swing.JLabel();
        colorPreviewLabel = new javax.swing.JLabel();
        imageLabel = new javax.swing.JLabel();
        imagePreviewLabel = new javax.swing.JLabel();
        browseImageButton = new javax.swing.JButton();
        imageScaleLabel = new javax.swing.JLabel();
        imageScaleFormattedTextField = new javax.swing.JFormattedTextField(percentFormat);
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        diameterFormattedTextField = new javax.swing.JFormattedTextField(integerFormat);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle((isNewEntityType ? "Ajout d'un type d'entité" : "Édition des types d'entité"));
        setModal(true);
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        entityTypeComboBox.setMaximumSize(new java.awt.Dimension(140, 24));
        entityTypeComboBox.setMinimumSize(new java.awt.Dimension(140, 24));
        entityTypeComboBox.setPreferredSize(new java.awt.Dimension(140, 24));
        entityTypeComboBox.setRenderer(new BasicComboBoxRenderer());
        entityTypeComboBox.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                entityTypeComboBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 5, 5);
        getContentPane().add(entityTypeComboBox, gridBagConstraints);

        deleteButton.setText("Supprimer");
        deleteButton.setMaximumSize(new java.awt.Dimension(90, 23));
        deleteButton.setMinimumSize(new java.awt.Dimension(90, 23));
        deleteButton.setPreferredSize(new java.awt.Dimension(90, 23));
        deleteButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 5, 10);
        getContentPane().add(deleteButton, gridBagConstraints);

        nameLabel.setText("Nom");
        nameLabel.setMaximumSize(new java.awt.Dimension(21, 20));
        nameLabel.setMinimumSize(new java.awt.Dimension(21, 20));
        nameLabel.setPreferredSize(new java.awt.Dimension(21, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        getContentPane().add(nameLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(nameTextField, gridBagConstraints);

        isTeamCheckBox.setText("Équipe");
        isTeamCheckBox.setMaximumSize(new java.awt.Dimension(57, 20));
        isTeamCheckBox.setMinimumSize(new java.awt.Dimension(57, 20));
        isTeamCheckBox.setPreferredSize(new java.awt.Dimension(57, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        getContentPane().add(isTeamCheckBox, gridBagConstraints);

        colorLabel.setText("Couleur");
        colorLabel.setMaximumSize(new java.awt.Dimension(37, 20));
        colorLabel.setMinimumSize(new java.awt.Dimension(37, 20));
        colorLabel.setPreferredSize(new java.awt.Dimension(37, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        getContentPane().add(colorLabel, gridBagConstraints);

        diameterLabel.setText("Diamètre du cercle (pixels)");
        diameterLabel.setMaximumSize(new java.awt.Dimension(130, 20));
        diameterLabel.setMinimumSize(new java.awt.Dimension(130, 20));
        diameterLabel.setPreferredSize(new java.awt.Dimension(130, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 5);
        getContentPane().add(diameterLabel, gridBagConstraints);

        colorPreviewLabel.setBackground(new java.awt.Color(0, 0, 0));
        colorPreviewLabel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255))));
        colorPreviewLabel.setMaximumSize(new java.awt.Dimension(20, 20));
        colorPreviewLabel.setMinimumSize(new java.awt.Dimension(20, 20));
        colorPreviewLabel.setOpaque(true);
        colorPreviewLabel.setPreferredSize(new java.awt.Dimension(20, 20));
        colorPreviewLabel.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                colorPreviewLabelMousePressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(colorPreviewLabel, gridBagConstraints);

        imageLabel.setText("Image");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        getContentPane().add(imageLabel, gridBagConstraints);

        imagePreviewLabel.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        imagePreviewLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imagePreviewLabel.setText(nullImageText);
        imagePreviewLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        imagePreviewLabel.setMaximumSize(new java.awt.Dimension(100, 100));
        imagePreviewLabel.setMinimumSize(new java.awt.Dimension(100, 100));
        imagePreviewLabel.setPreferredSize(new java.awt.Dimension(100, 100));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(imagePreviewLabel, gridBagConstraints);

        browseImageButton.setText("Parcourir...");
        browseImageButton.setMaximumSize(new java.awt.Dimension(90, 23));
        browseImageButton.setMinimumSize(new java.awt.Dimension(90, 23));
        browseImageButton.setPreferredSize(new java.awt.Dimension(90, 23));
        browseImageButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                browseImageButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 10);
        getContentPane().add(browseImageButton, gridBagConstraints);

        imageScaleLabel.setText("Échelle (%)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 5);
        getContentPane().add(imageScaleLabel, gridBagConstraints);

        imageScaleFormattedTextField.setColumns(5);
        imageScaleFormattedTextField.setValue(new Float(100));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(imageScaleFormattedTextField, gridBagConstraints);

        okButton.setText("OK");
        okButton.setMaximumSize(new java.awt.Dimension(90, 23));
        okButton.setMinimumSize(new java.awt.Dimension(90, 23));
        okButton.setPreferredSize(new java.awt.Dimension(90, 23));
        okButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                okButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 5);
        getContentPane().add(okButton, gridBagConstraints);

        cancelButton.setText("Annuler");
        cancelButton.setMaximumSize(new java.awt.Dimension(90, 23));
        cancelButton.setMinimumSize(new java.awt.Dimension(90, 23));
        cancelButton.setPreferredSize(new java.awt.Dimension(90, 23));
        cancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 10);
        getContentPane().add(cancelButton, gridBagConstraints);

        diameterFormattedTextField.setColumns(5);
        diameterFormattedTextField.setMinimumSize(new java.awt.Dimension(40, 20));
        diameterFormattedTextField.setPreferredSize(new java.awt.Dimension(40, 20));
        diameterFormattedTextField.setValue(new Integer(40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        getContentPane().add(diameterFormattedTextField, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okButtonActionPerformed
    {//GEN-HEADEREND:event_okButtonActionPerformed
        String newName = nameTextField.getText();
        Color newColor = colorPreviewLabel.getBackground();
        int newDiameter = ((Number) diameterFormattedTextField.getValue()).intValue();
        boolean newIsTeam = isTeamCheckBox.isSelected();
        float newImageScale = ((Number) imageScaleFormattedTextField.getValue()).floatValue() / 100f;
        if (newName == null || newName.isEmpty())
        {
            JOptionPane.showMessageDialog(this,
                                          "Le champs \"" + nameLabel.getText() + "\" est obligatoire.\n" +
                                          "Veuillez saisir un nom avant de continuer.",
                                          getTitle(),
                                          JOptionPane.ERROR_MESSAGE);
        }
        else if (newDiameter <= 0)
        {
            JOptionPane.showMessageDialog(this,
                                          "Le diamètre doit être supérieur à 0",
                                          getTitle(),
                                          JOptionPane.ERROR_MESSAGE);
        }
        else if (newImageScale <= 0)
        {
            JOptionPane.showMessageDialog(this,
                                          "L'échelle (%) de l'image doit être supérieur à 0",
                                          getTitle(),
                                          JOptionPane.ERROR_MESSAGE);
        }
        else if ((isNewEntityType && newIsTeam) &&
                 currentNumberOfTeams == controller.getMaxNumberOfTeams())
        {
            JOptionPane.showMessageDialog(this,
                                          "Impossible d'ajouter une équipe supplémentaire.\n" +
                                          "Nombre maximum d'équipe atteint.\n",
                                          getTitle(),
                                          JOptionPane.ERROR_MESSAGE);
        }
        else if (isNewEntityType)
        {
            if (entityTypeExist(mainWindowEntityTypeComboBox,
                                newName))
            {
                JOptionPane.showMessageDialog(this,
                                              "Cette entité existe déjà.",
                                              getTitle(),
                                              JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                controller.addEntityType(newName,
                                         newColor,
                                         newDiameter / 2,
                                         newImage,
                                         newImageScale,
                                         newIsTeam);

                mainWindowEntityTypeComboBox.addItem(newName);
                mainWindowEntityTypeComboBox.setSelectedItem(newName);
                dispose();
            }
        }
        else
        {
            String currentName = entityTypeComboBox.getSelectedItem().toString();
            boolean currentIsTeam = controller.isEntityTypeTeam(currentName);
            Color currentColor = controller.getEntityTypeColor(currentName);
            int currentDiameter = controller.getEntityTypeRadius(newName) * 2;
            BufferedImage currentImage = controller.getEntityTypeImage(currentName);
            float currentImageScale = controller.getEntityTypeImageScale(currentName);
            boolean isImagesAreEqual = ImageUtilities.imagesAreEqual(currentImage,
                                                                     newImage);
            if (currentName.equals(newName) &&
                currentColor.equals(newColor) &&
                currentDiameter == newDiameter &&
                currentIsTeam == newIsTeam &&
                currentImageScale == newImageScale &&
                isImagesAreEqual)
            {
                dispose();
            }
            else if (newIsTeam && !currentIsTeam &&
                     currentNumberOfTeams == controller.getMaxNumberOfTeams())
            {
                JOptionPane.showMessageDialog(this,
                                              "Impossible d'ajouter une équipe supplémentaire.\n" +
                                              "Nombre maximum d'équipe atteint.\n",
                                              getTitle(),
                                              JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                int option = JOptionPane.showConfirmDialog(this,
                                                           "Voullez-vous vraiment modifier les informations ?",
                                                           "Modification du rôle",
                                                           JOptionPane.YES_NO_OPTION);
                if (option == JOptionPane.OK_OPTION)
                {
                    controller.editEntityType(currentName,
                                              newName,
                                              newColor,
                                              newDiameter / 2,
                                              newImage,
                                              newImageScale,
                                              newIsTeam);

                    mainWindowEntityTypeComboBox.removeItem(currentName);
                    mainWindowEntityTypeComboBox.addItem(newName);
                    dispose();
                }
            }
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void browseImageButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_browseImageButtonActionPerformed
    {//GEN-HEADEREND:event_browseImageButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Images (*.jpg, *.png)", "jpg", "jpeg", "png");
        fileChooser.setFileFilter(filter);

        int option = fileChooser.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION)
        {
            String path = fileChooser.getSelectedFile().toString();
            newImage = controller.loadImageFromDisk(path);

            ImageIcon previewIcon;
            // NOTE: Only resize the image if one of the image dimension (width
            // or height) is greater than the imagePreviewLabel dimension.
            if (newImage.getWidth() > imagePreviewLabel.getWidth() ||
                newImage.getHeight() > imagePreviewLabel.getHeight())
            {
                previewIcon = ImageUtilities.getScaledImage(newImage,
                                                            imagePreviewLabel.getWidth(),
                                                            imagePreviewLabel.getHeight(),
                                                            true);
            }
            else
            {
                previewIcon = new ImageIcon(newImage);
            }

            imagePreviewLabel.setIcon(previewIcon);
            imagePreviewLabel.setText("");
            imagePreviewLabel.repaint();
        }
    }//GEN-LAST:event_browseImageButtonActionPerformed

    private void colorPreviewLabelMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_colorPreviewLabelMousePressed
    {//GEN-HEADEREND:event_colorPreviewLabelMousePressed
        Color color = JColorChooser.showDialog(null,
                                               "Veuillez choisir la couleur de l'entité",
                                               colorPreviewLabel.getBackground());
        if (color != null)
        {
            colorPreviewLabel.setBackground(color);
        }
    }//GEN-LAST:event_colorPreviewLabelMousePressed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonActionPerformed
    {//GEN-HEADEREND:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_deleteButtonActionPerformed
    {//GEN-HEADEREND:event_deleteButtonActionPerformed
        int option = JOptionPane.showConfirmDialog(this,
                                                   "Voullez-vous vraiment supprimer ce type d'entité ?",
                                                   "Supression du type d'entité",
                                                   JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.OK_OPTION)
        {
            Object itemToRemove = entityTypeComboBox.getSelectedItem();
            controller.removeEntityType(itemToRemove.toString());
            mainWindowEntityTypeComboBox.removeItem(itemToRemove.toString());
            entityTypeComboBox.removeItem(itemToRemove);

            if (controller.getEntityTypeNames().isEmpty())
            {
                dispose();
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void entityTypeComboBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_entityTypeComboBoxItemStateChanged
    {//GEN-HEADEREND:event_entityTypeComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED)
        {
            loadEntityType(entityTypeComboBox.getSelectedItem().toString());
        }
    }//GEN-LAST:event_entityTypeComboBoxItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseImageButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel colorLabel;
    private javax.swing.JLabel colorPreviewLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JFormattedTextField diameterFormattedTextField;
    private javax.swing.JLabel diameterLabel;
    private javax.swing.JComboBox<String> entityTypeComboBox;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel imagePreviewLabel;
    private javax.swing.JFormattedTextField imageScaleFormattedTextField;
    private javax.swing.JLabel imageScaleLabel;
    private javax.swing.JCheckBox isTeamCheckBox;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
}
